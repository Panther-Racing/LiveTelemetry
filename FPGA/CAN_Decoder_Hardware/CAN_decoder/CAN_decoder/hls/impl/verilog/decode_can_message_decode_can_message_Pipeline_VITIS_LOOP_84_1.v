// ==============================================================
// Generated by Vitis HLS v2024.1.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module decode_can_message_decode_can_message_Pipeline_VITIS_LOOP_84_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln84,
        hash_table_message_id_address0,
        hash_table_message_id_ce0,
        hash_table_message_id_q0,
        empty,
        hash_index_1_out,
        hash_index_1_out_ap_vld,
        mul_ln164_out,
        mul_ln164_out_ap_vld,
        icmp_ln84_out,
        icmp_ln84_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8:0] zext_ln84;
output  [8:0] hash_table_message_id_address0;
output   hash_table_message_id_ce0;
input  [28:0] hash_table_message_id_q0;
input  [28:0] empty;
output  [8:0] hash_index_1_out;
output   hash_index_1_out_ap_vld;
output  [15:0] mul_ln164_out;
output   mul_ln164_out_ap_vld;
output  [0:0] icmp_ln84_out;
output   icmp_ln84_out_ap_vld;

reg ap_idle;
reg hash_index_1_out_ap_vld;
reg mul_ln164_out_ap_vld;
reg icmp_ln84_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [0:0] and_ln84_fu_173_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [9:0] hash_index_1_reg_201;
wire   [8:0] trunc_ln76_fu_120_p1;
reg   [8:0] trunc_ln76_reg_209;
wire   [63:0] zext_ln76_fu_124_p1;
reg   [9:0] hash_index_fu_58;
wire   [9:0] add_ln88_fu_179_p2;
wire   [9:0] zext_ln84_cast_fu_108_p1;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_hash_index_1;
wire   [0:0] icmp_ln84_fu_154_p2;
reg    hash_table_message_id_ce0_local;
wire   [11:0] tmp_2_fu_136_p3;
wire   [15:0] tmp_1_fu_129_p3;
wire   [15:0] zext_ln84_1_fu_143_p1;
wire   [0:0] tmp_3_fu_160_p3;
wire   [0:0] xor_ln84_fu_167_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 hash_index_fu_58 = 10'd0;
#0 ap_done_reg = 1'b0;
end

decode_can_message_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        hash_index_fu_58 <= zext_ln84_cast_fu_108_p1;
    end else if (((1'd1 == and_ln84_fu_173_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        hash_index_fu_58 <= add_ln88_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        hash_index_1_reg_201 <= ap_sig_allocacmp_hash_index_1;
        trunc_ln76_reg_209 <= trunc_ln76_fu_120_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'd0 == and_ln84_fu_173_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_hash_index_1 = zext_ln84_cast_fu_108_p1;
    end else begin
        ap_sig_allocacmp_hash_index_1 = hash_index_fu_58;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'd0 == and_ln84_fu_173_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        hash_index_1_out_ap_vld = 1'b1;
    end else begin
        hash_index_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        hash_table_message_id_ce0_local = 1'b1;
    end else begin
        hash_table_message_id_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'd0 == and_ln84_fu_173_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln84_out_ap_vld = 1'b1;
    end else begin
        icmp_ln84_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'd0 == and_ln84_fu_173_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        mul_ln164_out_ap_vld = 1'b1;
    end else begin
        mul_ln164_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln88_fu_179_p2 = (hash_index_1_reg_201 + 10'd1);

assign and_ln84_fu_173_p2 = (xor_ln84_fu_167_p2 & icmp_ln84_fu_154_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign hash_index_1_out = trunc_ln76_reg_209;

assign hash_table_message_id_address0 = zext_ln76_fu_124_p1;

assign hash_table_message_id_ce0 = hash_table_message_id_ce0_local;

assign icmp_ln84_fu_154_p2 = ((hash_table_message_id_q0 != empty) ? 1'b1 : 1'b0);

assign icmp_ln84_out = icmp_ln84_fu_154_p2;

assign mul_ln164_out = (tmp_1_fu_129_p3 + zext_ln84_1_fu_143_p1);

assign tmp_1_fu_129_p3 = {{hash_index_1_reg_201}, {6'd0}};

assign tmp_2_fu_136_p3 = {{hash_index_1_reg_201}, {2'd0}};

assign tmp_3_fu_160_p3 = hash_index_1_reg_201[32'd9];

assign trunc_ln76_fu_120_p1 = ap_sig_allocacmp_hash_index_1[8:0];

assign xor_ln84_fu_167_p2 = (tmp_3_fu_160_p3 ^ 1'd1);

assign zext_ln76_fu_124_p1 = ap_sig_allocacmp_hash_index_1;

assign zext_ln84_1_fu_143_p1 = tmp_2_fu_136_p3;

assign zext_ln84_cast_fu_108_p1 = zext_ln84;

endmodule //decode_can_message_decode_can_message_Pipeline_VITIS_LOOP_84_1
