#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_start", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_done", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_idle", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_ready", 1, hls_out, -1, "", "", 1),
	Port_Property("decoded_signals_address0", 7, hls_out, 1, "ap_memory", "mem_address", 1),
	Port_Property("decoded_signals_ce0", 1, hls_out, 1, "ap_memory", "mem_ce", 1),
	Port_Property("decoded_signals_we0", 1, hls_out, 1, "ap_memory", "mem_we", 1),
	Port_Property("decoded_signals_d0", 43, hls_out, 1, "ap_memory", "mem_din", 1),
	Port_Property("hash_table_message_id_address0", 9, hls_out, 3, "ap_memory", "mem_address", 1),
	Port_Property("hash_table_message_id_ce0", 1, hls_out, 3, "ap_memory", "mem_ce", 1),
	Port_Property("hash_table_message_id_q0", 29, hls_in, 3, "ap_memory", "mem_dout", 1),
	Port_Property("hash_table_lut_index_address0", 9, hls_out, 4, "ap_memory", "mem_address", 1),
	Port_Property("hash_table_lut_index_ce0", 1, hls_out, 4, "ap_memory", "mem_ce", 1),
	Port_Property("hash_table_lut_index_q0", 32, hls_in, 4, "ap_memory", "mem_dout", 1),
	Port_Property("hash_table_accumulator_accumulated_values_address0", 16, hls_out, 5, "ap_memory", "mem_address", 1),
	Port_Property("hash_table_accumulator_accumulated_values_ce0", 1, hls_out, 5, "ap_memory", "mem_ce", 1),
	Port_Property("hash_table_accumulator_accumulated_values_we0", 1, hls_out, 5, "ap_memory", "mem_we", 1),
	Port_Property("hash_table_accumulator_accumulated_values_d0", 64, hls_out, 5, "ap_memory", "mem_din", 1),
	Port_Property("hash_table_accumulator_accumulated_values_q0", 64, hls_in, 5, "ap_memory", "mem_dout", 1),
	Port_Property("hash_table_accumulator_accumulated_values_address1", 16, hls_out, 5, "ap_memory", "MemPortADDR2", 1),
	Port_Property("hash_table_accumulator_accumulated_values_ce1", 1, hls_out, 5, "ap_memory", "MemPortCE2", 1),
	Port_Property("hash_table_accumulator_accumulated_values_we1", 1, hls_out, 5, "ap_memory", "MemPortWE2", 1),
	Port_Property("hash_table_accumulator_accumulated_values_d1", 64, hls_out, 5, "ap_memory", "MemPortDIN2", 1),
	Port_Property("hash_table_accumulator_accumulated_values_q1", 64, hls_in, 5, "ap_memory", "MemPortDOUT2", 1),
	Port_Property("hash_table_accumulator_counter_address0", 9, hls_out, 6, "ap_memory", "mem_address", 1),
	Port_Property("hash_table_accumulator_counter_ce0", 1, hls_out, 6, "ap_memory", "mem_ce", 1),
	Port_Property("hash_table_accumulator_counter_we0", 1, hls_out, 6, "ap_memory", "mem_we", 1),
	Port_Property("hash_table_accumulator_counter_d0", 32, hls_out, 6, "ap_memory", "mem_din", 1),
	Port_Property("hash_table_accumulator_counter_q0", 32, hls_in, 6, "ap_memory", "mem_dout", 1),
	Port_Property("msg_lut_address0", 9, hls_out, 7, "ap_memory", "mem_address", 1),
	Port_Property("msg_lut_ce0", 1, hls_out, 7, "ap_memory", "mem_ce", 1),
	Port_Property("msg_lut_q0", 56, hls_in, 7, "ap_memory", "mem_dout", 1),
	Port_Property("signal_def_mem_address0", 9, hls_out, 8, "ap_memory", "mem_address", 1),
	Port_Property("signal_def_mem_ce0", 1, hls_out, 8, "ap_memory", "mem_ce", 1),
	Port_Property("signal_def_mem_q0", 80, hls_in, 8, "ap_memory", "mem_dout", 1),
	Port_Property("signal_def_mem_address1", 9, hls_out, 8, "ap_memory", "MemPortADDR2", 1),
	Port_Property("signal_def_mem_ce1", 1, hls_out, 8, "ap_memory", "MemPortCE2", 1),
	Port_Property("signal_def_mem_q1", 80, hls_in, 8, "ap_memory", "MemPortDOUT2", 1),
	Port_Property("s_axi_control_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_AWADDR", 6, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_ARADDR", 6, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_BRESP", 2, hls_out, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "decode_can_message";
